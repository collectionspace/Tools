Managing iReports

11/27/2013

OVERVIEW

Each CSpace deployment includes several customized reports created using iReport.  Some of these reports are intended to be generated from within CSpace and so need to be installed as documented in the wiki.  Others are run "standalone", meaning that they are executed on a user's local system and access the CSpace database via a JDBC Postgres connector.

Those that are installed in CSpace need to be maintained alongside the CSpace installation itself -- if the system is upgraded, for example, the reports may needed to upgraded and reinstalled as well.  In addition, installed reports use the .jasper binary version of a report (i.e. the "compiled file"), while the standalone reports can be executed via the iReport desktop application using either the source .jrxml file or the .jasper file.

This document documents the best practice for developing, installing, and maintaining iReports for use with CSpace.

IREPORT DEVELOPMENT

Reports are designed and developed in collaboration with museum staff.  Typically, museum staff provide printed and/or digital versions of existing "legacy" reports, or mockups or other specifications for new reports.  The iReport developer then creates a report using the iReport application.  NB: care must be taken to ensure that the iReport version used is compatible with the JasperSoft runtime installed in CSpace, and that fonts, images, and other dependencies in the report exist on the system used to generate the report.

Typically, the developer configures an iReport datasource to point to the development server for the CSpace deployment in question, and identifies appropriate test data (e.g. CSIDs or lists of CSIDs) to use as defaults during the development process. This often entails logging into the development server and creating suitable cases for reporting.

Once developed, the source .jrxml files are checked into the git repository for the institution, under https://github.com/cspace-deployment/Tools/reports, e.g.

    https://github.com/cspace-deployment/Tools/reports/pahma

Thereafter, the source files can be updated and managed in the usual way.

IREPORT DEPLOYMENT: STANDALONE

For standalone iReports, no defined procedure is necessary: it is the user's responsibility to ensure that the system is suitably configured for the reports needed.  Configuration required includes

* Sufficient RAM and CPU resources for the version of iReport being run.
* Suitable OS versions
* Installation of the appropriate version of iReport
* Installation of the appropriate JDBC connector for CSpace (typically the Postgres JDBC driver)
* Fonts, graphics, etc. as needed.
* Printer or other output devices suitable for the reporting task

The user then downloads the desired iReport .jrxml files, either via git on the command line or by browsing the git repository via a web browser.

IREPORT DEPLOYMENT: IN CSPACE

Deploying iReports within CSpace requires:

* checking out the desired .jrxml file(s) from git to a system with iReport installed
* compiling the .jrxml file(s) (usually individually, by hand) into .jasper files
* moving the .jrxml files to the appropriate tomcat directory on the target system.  While this can be accomplished in one step if one has write access to the target directory, it is usually necessary to first stage the file(s) to one's local directory on the target system, ssh in, then sudo cp the files to their final destination. (Note: CSpace will compile the .jrxml file when it is first called into a .jasper file)
* instructing CSpace about the name and context for the report. This involves a call to the REST API with an XML payload containing this information.  Scripts for "loading" iReports (and performing other maintenance) are provided in the git repository. Note that these need to be configured for each target system.

Note: These instructions are a bit out of date.  As of CSpace 3, one only needs to copy in the .jrxml file to the target directory.  However, the older .jasper file may need to be removed.  The XML payload can also be posted to the report service in a separate step via a curl command.  

    local $ cd git/Tools/reports/mymuseum
    local $ git update
    local $ # compile … compile … compile
    local $ scp *.jasper target.cspace.berkeley.edu:
    local $ ssh target.cspace.berkeley.edu
    target $ sudo cp myireport.jasper /usr/local/share/apache-tomcat-6.0.33/cspace/reports/
    target $ ./load-report.sh myireport  "my Super iReport" ""

IREPORT ONGOING MAINTENANCE

No specific practices have yet been developed to aid in ongoing maintenance of iReports.  This would be helpful! Having a suite of test cases to use in debugging and QA would help prevent regressions and ensure that the correct results are produced.

When problems are identified or enhancements made:

The steps are basically as follows:

1. create JIRA for this work
2. read code, determine what to do to implement fix...
3. create clone or fork of Tools repo on your machine ... or just cd to it if you already have one
4. make sure your local repo is up-to-date
5. modify file(s) using your favorite IDE or source code editor
6. test fix on your local machine (using ireport client)
7. check your edits using 'git diff'
8. add file(s) to commit
9. make commit (referring to relevant JIRAs)
10. push code up to production repo (cspace-deployment)
11. it is also prudent to update your own fork at this point, if you have one.
12. double check that commit "took" on GitHub. e.g. https://github.com/cspace-deployment/Tools/commit/....
13. update Dev and Prod servers with the new .jxrml (removing the old .jasper file)
14. if this report will display in a Django web app, also put the jrxml file in the /usr/local/share/django/jrxml directory on dev.cspace that is accessible to Django (see PAHMA-823 for details of why you have to do this.)
15. test to see the reports work on Prod and Dev. In the case of Prod reports, some of them can be (and should be) tested via the ireports webapp, e.g., https://dev.cspace.berkeley.edu/botgarden_project/ireports/
16. resolve JIRA(s)
17. notify customer of fix

Note that this workflow presumes you use git from the command line. If you are using an IDE to do your editing and communicate with GitHub, steps 3-11 of this workflow will differ for you. Adjust accordingly.

USEFUL HELPER SCRIPTS

These helper scripts need environment variables containing the hostnames, logins, and passwords for the target system.  There is a script called set-config.sh which sets these values, and the other scripts check to see that they are set.  Therefore, it is only necessary to modify (and call) the set-config.sh script once for all the other scripts.  You may want to put either an invocation of this script or set the variables in your own login profile.

(See https://github.com/cspace-deployment/Tools/reports/helpers/README for details.)

The two variables used are:

REPORTURL="http://hostname:8180"
REPORTUSER="user@target.cspace.berkeley.edu:password"

They mainly serve as example code for how to do things with reports, and you should plan to make further modifications to suit your own ends.

$ ./load-report.sh reportname  "report name" "doctype"

This script assumes a file reportname.jasper exists and copies it to the tomcat directory, it then configures an XML payload and calls the REST API to install the report. "report name" is the value that will appear in the UI, and "doctype" is the value of <forDocType>, which specifies the context for the report.

$ ./delete-report.sh reports <CSID>

Deletes the report identified by CSID from the CSpace configuration; does *NOT* delete the .jasper file.

Note: You can also delete individual reports using the Firefox plugin, Poster.  The URL will be the full URL for the report service on the host followed by the CSID of the report to delete, e.g., 
  http://botgarden.cspace.berkeley.edu:8180/cspace-services/reports/b3743540-8c99-412f-b851
Enter the credentials; select Delete from the dropdown of Actions; and click the green circular "go" button.

$ list-reports.sh

prints the CSID and report names of the reports installed on the target system.

Note: You can also get a list of reports by making a call directly to the report service API, e.g., 
  http://botgarden.cspace.berkeley.edu:8180/cspace-services/reports/


MANUAL RECIPE FOR UPDATING AN iREPORT

This recipe reinforces the instructions above. The steps are done by hand, at the command line, rather than by script.

EXAMPLE: Revising the UCJEPS Collector Label (Word) report for Groups on the ucjeps-dev server.
ENVIRONMENT: ucjeps-dev is running CollectionSpace 3.3, iReport version __, postgres v. __ on a Red Hat 6(?) Linux VM.

WHAT TO LOOK FOR / WHERE TO LOOK
• In the CollectionSpace web UI, reports appear in the right sidebar of the cataloging or procedure record for which the report was written. On the ucjeps-dev instance, the Collector Label (Word) report is available on the Group record. 
• On the server, the .jrxml and .jasper files the define the report can be found in the /usr/local/share/tomcat/cspace/reports/ directory.
    - ucjepsCollectorLabel_group.jrxml
    - ucjepsCollectorLabel_group.jasper
• In the nuxeo database, reports are stored in reports_common 
    From the nuxeo prompt, run: nuxeo=> select * from reports_common;

TASK SUMMARY
To replace an existing report with a new version, you must delete the existing report from the database and from the file system, then upload a new .jrxml file and install (compile/initialize) the new report.

STEPS
1. Determine the CSID of the report that you want to replace.
     • https://ucjeps.cspace.berkeley.edu/cspace-services/reports/ (login with ucjeps-dev credentials).
     • Find report by name and copy its CSID

2. Delete the existing report via a call to cspace-services.
     • curl -i -u admin@ucjeps.cspace.berkeley.edu -X DELETE https://ucjeps-dev.cspace.berkeley.edu/cspace-services/reports/{CSID}   (provide user password when asked)
     • Report should disappear from the database.

3. Delete the .jrxml and .jasper files for that report from the server.
     • cd /usr/local/share/tomcat/cspace/reports
     • sudo rm {filename} -- once for each file, or use * at end of partial file name, being sure that the wildcard doesn't match any unintended files. (Use sudo rm ucjepsCollectorLabel_group.j* for removing both the .jrmxl and .jasper files, without touching the files for the _concat version of the report.)

4. Securely copy the new .jrxml file to server.
     • from the local machine:
       scp /Users/rjaffe/Desktop/ucjepsCollectorLabel_group.jrxml ucjeps-dev.cspace.berkeley.edu:/usr/local/share/tomcat/cspace/reports/ucjepsCollectorLabel_group.jrxml
     •  In this case, the file I want to copy sits on my desktop.

5. Change ownership of .jrxml file:
     • sudo chown tomcat:tomcat ucjepsCollectorLabel_group.jrxml 

6. Change mod of .jrxml file (although this seemed to happen automatically if I chown after initializing and running the report):
     • sudo chmod u-x ucjepsCollectorLabel_group.jrxml
     • sudo chmod g-x ucjepsCollectorLabel_group.jrxml
     • sudo chmod o-x ucjepsCollectorLabel_group.jrxml

7. "Initialize" or "register" this report, i.e. send a request to cspace-services with an .xml payload that provides the name and context for the report and instantiates the report so that CSpace assigns it a CSID.

     • curl -i -u admin@ucjeps.cspace.berkeley.edu -X POST -H "Content-Type: application/xml" https://ucjeps-dev.cspace.berkeley.edu/cspace-services/reports -T /Users/rjaffe/Desktop/ucjepsCollectorLabel_group.xml  
(Note that .xml file is sent from my desktop.)
     • Report should appear in the database.

8. Clear browser cache and run the report from the CSpace UI. 
     • Report should be created and either appear in the browser or be downloaded per browser settings to your local machine.
     • The compiled .jasper file is created automatically.






